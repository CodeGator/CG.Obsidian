@inject TokenProvider TokenProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    /// <summary>
    /// This property contains tokens gleaned from the underlying HttpContext object.
    /// </summary>
    [Parameter]
    public TokenProvider InitialState { get; set; }

    /// <summary>
    /// This method is overridden in order to initialize the page.
    /// </summary>
    /// <returns></returns>
    protected override Task OnInitializedAsync()
    {
        // We MUST copy these values into the TokenProvider object that was
        //   created by the DI container, in order for them to be available
        //   at runtime.
        TokenProvider.XsrfToken = InitialState.XsrfToken;
        TokenProvider.AccessToken = InitialState.AccessToken;
        TokenProvider.RefreshToken = InitialState.RefreshToken;
        TokenProvider.ExpiresAt = InitialState.ExpiresAt;

        // Give the base class a chance.
        return base.OnInitializedAsync();
    }
}
