### YamlMime:XRefMap
sorted: true
references:
- uid: CG.Obsidian
  name: CG.Obsidian
  href: api/CG.Obsidian.html
  commentId: N:CG.Obsidian
  fullName: CG.Obsidian
  nameWithType: CG.Obsidian
- uid: CG.Obsidian.Managers
  name: CG.Obsidian.Managers
  href: api/CG.Obsidian.Managers.html
  commentId: N:CG.Obsidian.Managers
  fullName: CG.Obsidian.Managers
  nameWithType: CG.Obsidian.Managers
- uid: CG.Obsidian.Managers.IMimeTypeManager
  name: IMimeTypeManager
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html
  commentId: T:CG.Obsidian.Managers.IMimeTypeManager
  fullName: CG.Obsidian.Managers.IMimeTypeManager
  nameWithType: IMimeTypeManager
- uid: CG.Obsidian.Managers.IMimeTypeManager.FileExtensions
  name: FileExtensions
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html#CG_Obsidian_Managers_IMimeTypeManager_FileExtensions
  commentId: P:CG.Obsidian.Managers.IMimeTypeManager.FileExtensions
  fullName: CG.Obsidian.Managers.IMimeTypeManager.FileExtensions
  nameWithType: IMimeTypeManager.FileExtensions
- uid: CG.Obsidian.Managers.IMimeTypeManager.FileExtensions*
  name: FileExtensions
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html#CG_Obsidian_Managers_IMimeTypeManager_FileExtensions_
  commentId: Overload:CG.Obsidian.Managers.IMimeTypeManager.FileExtensions
  isSpec: "True"
  fullName: CG.Obsidian.Managers.IMimeTypeManager.FileExtensions
  nameWithType: IMimeTypeManager.FileExtensions
- uid: CG.Obsidian.Managers.IMimeTypeManager.FindByExtensionAsync(System.String,System.Threading.CancellationToken)
  name: FindByExtensionAsync(String, CancellationToken)
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html#CG_Obsidian_Managers_IMimeTypeManager_FindByExtensionAsync_System_String_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Managers.IMimeTypeManager.FindByExtensionAsync(System.String,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Managers.IMimeTypeManager.FindByExtensionAsync(System.String, System.Threading.CancellationToken)
  nameWithType: IMimeTypeManager.FindByExtensionAsync(String, CancellationToken)
- uid: CG.Obsidian.Managers.IMimeTypeManager.FindByExtensionAsync*
  name: FindByExtensionAsync
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html#CG_Obsidian_Managers_IMimeTypeManager_FindByExtensionAsync_
  commentId: Overload:CG.Obsidian.Managers.IMimeTypeManager.FindByExtensionAsync
  isSpec: "True"
  fullName: CG.Obsidian.Managers.IMimeTypeManager.FindByExtensionAsync
  nameWithType: IMimeTypeManager.FindByExtensionAsync
- uid: CG.Obsidian.Managers.IMimeTypeManager.MimeTypes
  name: MimeTypes
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html#CG_Obsidian_Managers_IMimeTypeManager_MimeTypes
  commentId: P:CG.Obsidian.Managers.IMimeTypeManager.MimeTypes
  fullName: CG.Obsidian.Managers.IMimeTypeManager.MimeTypes
  nameWithType: IMimeTypeManager.MimeTypes
- uid: CG.Obsidian.Managers.IMimeTypeManager.MimeTypes*
  name: MimeTypes
  href: api/CG.Obsidian.Managers.IMimeTypeManager.html#CG_Obsidian_Managers_IMimeTypeManager_MimeTypes_
  commentId: Overload:CG.Obsidian.Managers.IMimeTypeManager.MimeTypes
  isSpec: "True"
  fullName: CG.Obsidian.Managers.IMimeTypeManager.MimeTypes
  nameWithType: IMimeTypeManager.MimeTypes
- uid: CG.Obsidian.Managers.MimeTypeManager
  name: MimeTypeManager
  href: api/CG.Obsidian.Managers.MimeTypeManager.html
  commentId: T:CG.Obsidian.Managers.MimeTypeManager
  fullName: CG.Obsidian.Managers.MimeTypeManager
  nameWithType: MimeTypeManager
- uid: CG.Obsidian.Managers.MimeTypeManager.#ctor(CG.Obsidian.Stores.IMimeTypeStore,CG.Obsidian.Stores.IFileExtensionStore,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Managers.MimeTypeManager})
  name: MimeTypeManager(IMimeTypeStore, IFileExtensionStore, ILogger<MimeTypeManager>)
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager__ctor_CG_Obsidian_Stores_IMimeTypeStore_CG_Obsidian_Stores_IFileExtensionStore_Microsoft_Extensions_Logging_ILogger_CG_Obsidian_Managers_MimeTypeManager__
  commentId: M:CG.Obsidian.Managers.MimeTypeManager.#ctor(CG.Obsidian.Stores.IMimeTypeStore,CG.Obsidian.Stores.IFileExtensionStore,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Managers.MimeTypeManager})
  name.vb: MimeTypeManager(IMimeTypeStore, IFileExtensionStore, ILogger(Of MimeTypeManager))
  fullName: CG.Obsidian.Managers.MimeTypeManager.MimeTypeManager(CG.Obsidian.Stores.IMimeTypeStore, CG.Obsidian.Stores.IFileExtensionStore, Microsoft.Extensions.Logging.ILogger<CG.Obsidian.Managers.MimeTypeManager>)
  fullName.vb: CG.Obsidian.Managers.MimeTypeManager.MimeTypeManager(CG.Obsidian.Stores.IMimeTypeStore, CG.Obsidian.Stores.IFileExtensionStore, Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.Managers.MimeTypeManager))
  nameWithType: MimeTypeManager.MimeTypeManager(IMimeTypeStore, IFileExtensionStore, ILogger<MimeTypeManager>)
  nameWithType.vb: MimeTypeManager.MimeTypeManager(IMimeTypeStore, IFileExtensionStore, ILogger(Of MimeTypeManager))
- uid: CG.Obsidian.Managers.MimeTypeManager.#ctor*
  name: MimeTypeManager
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager__ctor_
  commentId: Overload:CG.Obsidian.Managers.MimeTypeManager.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Managers.MimeTypeManager.MimeTypeManager
  nameWithType: MimeTypeManager.MimeTypeManager
- uid: CG.Obsidian.Managers.MimeTypeManager.FileExtensions
  name: FileExtensions
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_FileExtensions
  commentId: P:CG.Obsidian.Managers.MimeTypeManager.FileExtensions
  fullName: CG.Obsidian.Managers.MimeTypeManager.FileExtensions
  nameWithType: MimeTypeManager.FileExtensions
- uid: CG.Obsidian.Managers.MimeTypeManager.FileExtensions*
  name: FileExtensions
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_FileExtensions_
  commentId: Overload:CG.Obsidian.Managers.MimeTypeManager.FileExtensions
  isSpec: "True"
  fullName: CG.Obsidian.Managers.MimeTypeManager.FileExtensions
  nameWithType: MimeTypeManager.FileExtensions
- uid: CG.Obsidian.Managers.MimeTypeManager.FindByExtensionAsync(System.String,System.Threading.CancellationToken)
  name: FindByExtensionAsync(String, CancellationToken)
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_FindByExtensionAsync_System_String_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Managers.MimeTypeManager.FindByExtensionAsync(System.String,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Managers.MimeTypeManager.FindByExtensionAsync(System.String, System.Threading.CancellationToken)
  nameWithType: MimeTypeManager.FindByExtensionAsync(String, CancellationToken)
- uid: CG.Obsidian.Managers.MimeTypeManager.FindByExtensionAsync*
  name: FindByExtensionAsync
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_FindByExtensionAsync_
  commentId: Overload:CG.Obsidian.Managers.MimeTypeManager.FindByExtensionAsync
  isSpec: "True"
  fullName: CG.Obsidian.Managers.MimeTypeManager.FindByExtensionAsync
  nameWithType: MimeTypeManager.FindByExtensionAsync
- uid: CG.Obsidian.Managers.MimeTypeManager.Logger
  name: Logger
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_Logger
  commentId: P:CG.Obsidian.Managers.MimeTypeManager.Logger
  fullName: CG.Obsidian.Managers.MimeTypeManager.Logger
  nameWithType: MimeTypeManager.Logger
- uid: CG.Obsidian.Managers.MimeTypeManager.Logger*
  name: Logger
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_Logger_
  commentId: Overload:CG.Obsidian.Managers.MimeTypeManager.Logger
  isSpec: "True"
  fullName: CG.Obsidian.Managers.MimeTypeManager.Logger
  nameWithType: MimeTypeManager.Logger
- uid: CG.Obsidian.Managers.MimeTypeManager.MimeTypes
  name: MimeTypes
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_MimeTypes
  commentId: P:CG.Obsidian.Managers.MimeTypeManager.MimeTypes
  fullName: CG.Obsidian.Managers.MimeTypeManager.MimeTypes
  nameWithType: MimeTypeManager.MimeTypes
- uid: CG.Obsidian.Managers.MimeTypeManager.MimeTypes*
  name: MimeTypes
  href: api/CG.Obsidian.Managers.MimeTypeManager.html#CG_Obsidian_Managers_MimeTypeManager_MimeTypes_
  commentId: Overload:CG.Obsidian.Managers.MimeTypeManager.MimeTypes
  isSpec: "True"
  fullName: CG.Obsidian.Managers.MimeTypeManager.MimeTypes
  nameWithType: MimeTypeManager.MimeTypes
- uid: CG.Obsidian.Models
  name: CG.Obsidian.Models
  href: api/CG.Obsidian.Models.html
  commentId: N:CG.Obsidian.Models
  fullName: CG.Obsidian.Models
  nameWithType: CG.Obsidian.Models
- uid: CG.Obsidian.Models.FileExtension
  name: FileExtension
  href: api/CG.Obsidian.Models.FileExtension.html
  commentId: T:CG.Obsidian.Models.FileExtension
  fullName: CG.Obsidian.Models.FileExtension
  nameWithType: FileExtension
- uid: CG.Obsidian.Models.FileExtension.Extension
  name: Extension
  href: api/CG.Obsidian.Models.FileExtension.html#CG_Obsidian_Models_FileExtension_Extension
  commentId: P:CG.Obsidian.Models.FileExtension.Extension
  fullName: CG.Obsidian.Models.FileExtension.Extension
  nameWithType: FileExtension.Extension
- uid: CG.Obsidian.Models.FileExtension.Extension*
  name: Extension
  href: api/CG.Obsidian.Models.FileExtension.html#CG_Obsidian_Models_FileExtension_Extension_
  commentId: Overload:CG.Obsidian.Models.FileExtension.Extension
  isSpec: "True"
  fullName: CG.Obsidian.Models.FileExtension.Extension
  nameWithType: FileExtension.Extension
- uid: CG.Obsidian.Models.FileExtension.Id
  name: Id
  href: api/CG.Obsidian.Models.FileExtension.html#CG_Obsidian_Models_FileExtension_Id
  commentId: P:CG.Obsidian.Models.FileExtension.Id
  fullName: CG.Obsidian.Models.FileExtension.Id
  nameWithType: FileExtension.Id
- uid: CG.Obsidian.Models.FileExtension.Id*
  name: Id
  href: api/CG.Obsidian.Models.FileExtension.html#CG_Obsidian_Models_FileExtension_Id_
  commentId: Overload:CG.Obsidian.Models.FileExtension.Id
  isSpec: "True"
  fullName: CG.Obsidian.Models.FileExtension.Id
  nameWithType: FileExtension.Id
- uid: CG.Obsidian.Models.FileExtension.MimeTypeId
  name: MimeTypeId
  href: api/CG.Obsidian.Models.FileExtension.html#CG_Obsidian_Models_FileExtension_MimeTypeId
  commentId: P:CG.Obsidian.Models.FileExtension.MimeTypeId
  fullName: CG.Obsidian.Models.FileExtension.MimeTypeId
  nameWithType: FileExtension.MimeTypeId
- uid: CG.Obsidian.Models.FileExtension.MimeTypeId*
  name: MimeTypeId
  href: api/CG.Obsidian.Models.FileExtension.html#CG_Obsidian_Models_FileExtension_MimeTypeId_
  commentId: Overload:CG.Obsidian.Models.FileExtension.MimeTypeId
  isSpec: "True"
  fullName: CG.Obsidian.Models.FileExtension.MimeTypeId
  nameWithType: FileExtension.MimeTypeId
- uid: CG.Obsidian.Models.MimeType
  name: MimeType
  href: api/CG.Obsidian.Models.MimeType.html
  commentId: T:CG.Obsidian.Models.MimeType
  fullName: CG.Obsidian.Models.MimeType
  nameWithType: MimeType
- uid: CG.Obsidian.Models.MimeType.#ctor
  name: MimeType()
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType__ctor
  commentId: M:CG.Obsidian.Models.MimeType.#ctor
  fullName: CG.Obsidian.Models.MimeType.MimeType()
  nameWithType: MimeType.MimeType()
- uid: CG.Obsidian.Models.MimeType.#ctor*
  name: MimeType
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType__ctor_
  commentId: Overload:CG.Obsidian.Models.MimeType.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Models.MimeType.MimeType
  nameWithType: MimeType.MimeType
- uid: CG.Obsidian.Models.MimeType.Description
  name: Description
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Description
  commentId: P:CG.Obsidian.Models.MimeType.Description
  fullName: CG.Obsidian.Models.MimeType.Description
  nameWithType: MimeType.Description
- uid: CG.Obsidian.Models.MimeType.Description*
  name: Description
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Description_
  commentId: Overload:CG.Obsidian.Models.MimeType.Description
  isSpec: "True"
  fullName: CG.Obsidian.Models.MimeType.Description
  nameWithType: MimeType.Description
- uid: CG.Obsidian.Models.MimeType.Extensions
  name: Extensions
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Extensions
  commentId: P:CG.Obsidian.Models.MimeType.Extensions
  fullName: CG.Obsidian.Models.MimeType.Extensions
  nameWithType: MimeType.Extensions
- uid: CG.Obsidian.Models.MimeType.Extensions*
  name: Extensions
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Extensions_
  commentId: Overload:CG.Obsidian.Models.MimeType.Extensions
  isSpec: "True"
  fullName: CG.Obsidian.Models.MimeType.Extensions
  nameWithType: MimeType.Extensions
- uid: CG.Obsidian.Models.MimeType.Id
  name: Id
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Id
  commentId: P:CG.Obsidian.Models.MimeType.Id
  fullName: CG.Obsidian.Models.MimeType.Id
  nameWithType: MimeType.Id
- uid: CG.Obsidian.Models.MimeType.Id*
  name: Id
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Id_
  commentId: Overload:CG.Obsidian.Models.MimeType.Id
  isSpec: "True"
  fullName: CG.Obsidian.Models.MimeType.Id
  nameWithType: MimeType.Id
- uid: CG.Obsidian.Models.MimeType.SubType
  name: SubType
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_SubType
  commentId: P:CG.Obsidian.Models.MimeType.SubType
  fullName: CG.Obsidian.Models.MimeType.SubType
  nameWithType: MimeType.SubType
- uid: CG.Obsidian.Models.MimeType.SubType*
  name: SubType
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_SubType_
  commentId: Overload:CG.Obsidian.Models.MimeType.SubType
  isSpec: "True"
  fullName: CG.Obsidian.Models.MimeType.SubType
  nameWithType: MimeType.SubType
- uid: CG.Obsidian.Models.MimeType.Type
  name: Type
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Type
  commentId: P:CG.Obsidian.Models.MimeType.Type
  fullName: CG.Obsidian.Models.MimeType.Type
  nameWithType: MimeType.Type
- uid: CG.Obsidian.Models.MimeType.Type*
  name: Type
  href: api/CG.Obsidian.Models.MimeType.html#CG_Obsidian_Models_MimeType_Type_
  commentId: Overload:CG.Obsidian.Models.MimeType.Type
  isSpec: "True"
  fullName: CG.Obsidian.Models.MimeType.Type
  nameWithType: MimeType.Type
- uid: CG.Obsidian.Repositories
  name: CG.Obsidian.Repositories
  href: api/CG.Obsidian.Repositories.html
  commentId: N:CG.Obsidian.Repositories
  fullName: CG.Obsidian.Repositories
  nameWithType: CG.Obsidian.Repositories
- uid: CG.Obsidian.Repositories.IFileExtensionRepository
  name: IFileExtensionRepository
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html
  commentId: T:CG.Obsidian.Repositories.IFileExtensionRepository
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository
  nameWithType: IFileExtensionRepository
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: AddAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_AddAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Repositories.IFileExtensionRepository.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.AddAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: IFileExtensionRepository.AddAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_AddAsync_
  commentId: Overload:CG.Obsidian.Repositories.IFileExtensionRepository.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.AddAsync
  nameWithType: IFileExtensionRepository.AddAsync
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_AsQueryable
  commentId: M:CG.Obsidian.Repositories.IFileExtensionRepository.AsQueryable
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.AsQueryable()
  nameWithType: IFileExtensionRepository.AsQueryable()
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_AsQueryable_
  commentId: Overload:CG.Obsidian.Repositories.IFileExtensionRepository.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.AsQueryable
  nameWithType: IFileExtensionRepository.AsQueryable
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.DeleteAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: DeleteAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_DeleteAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Repositories.IFileExtensionRepository.DeleteAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.DeleteAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: IFileExtensionRepository.DeleteAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_DeleteAsync_
  commentId: Overload:CG.Obsidian.Repositories.IFileExtensionRepository.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.DeleteAsync
  nameWithType: IFileExtensionRepository.DeleteAsync
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: UpdateAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_UpdateAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Repositories.IFileExtensionRepository.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.UpdateAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: IFileExtensionRepository.UpdateAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Repositories.IFileExtensionRepository.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.Repositories.IFileExtensionRepository.html#CG_Obsidian_Repositories_IFileExtensionRepository_UpdateAsync_
  commentId: Overload:CG.Obsidian.Repositories.IFileExtensionRepository.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IFileExtensionRepository.UpdateAsync
  nameWithType: IFileExtensionRepository.UpdateAsync
- uid: CG.Obsidian.Repositories.IMimeTypeRepository
  name: IMimeTypeRepository
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html
  commentId: T:CG.Obsidian.Repositories.IMimeTypeRepository
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository
  nameWithType: IMimeTypeRepository
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: AddAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_AddAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Repositories.IMimeTypeRepository.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.AddAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: IMimeTypeRepository.AddAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_AddAsync_
  commentId: Overload:CG.Obsidian.Repositories.IMimeTypeRepository.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.AddAsync
  nameWithType: IMimeTypeRepository.AddAsync
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_AsQueryable
  commentId: M:CG.Obsidian.Repositories.IMimeTypeRepository.AsQueryable
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.AsQueryable()
  nameWithType: IMimeTypeRepository.AsQueryable()
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_AsQueryable_
  commentId: Overload:CG.Obsidian.Repositories.IMimeTypeRepository.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.AsQueryable
  nameWithType: IMimeTypeRepository.AsQueryable
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.DeleteAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: DeleteAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_DeleteAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Repositories.IMimeTypeRepository.DeleteAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.DeleteAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: IMimeTypeRepository.DeleteAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_DeleteAsync_
  commentId: Overload:CG.Obsidian.Repositories.IMimeTypeRepository.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.DeleteAsync
  nameWithType: IMimeTypeRepository.DeleteAsync
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: UpdateAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_UpdateAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Repositories.IMimeTypeRepository.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.UpdateAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: IMimeTypeRepository.UpdateAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Repositories.IMimeTypeRepository.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.Repositories.IMimeTypeRepository.html#CG_Obsidian_Repositories_IMimeTypeRepository_UpdateAsync_
  commentId: Overload:CG.Obsidian.Repositories.IMimeTypeRepository.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.Repositories.IMimeTypeRepository.UpdateAsync
  nameWithType: IMimeTypeRepository.UpdateAsync
- uid: CG.Obsidian.ServiceCollectionExtensions
  name: ServiceCollectionExtensions
  href: api/CG.Obsidian.ServiceCollectionExtensions.html
  commentId: T:CG.Obsidian.ServiceCollectionExtensions
  fullName: CG.Obsidian.ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
- uid: CG.Obsidian.ServiceCollectionExtensions.AddObsidianManagers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: AddObsidianManagers(IServiceCollection, IConfiguration, ServiceLifetime)
  href: api/CG.Obsidian.ServiceCollectionExtensions.html#CG_Obsidian_ServiceCollectionExtensions_AddObsidianManagers_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_Microsoft_Extensions_DependencyInjection_ServiceLifetime_
  commentId: M:CG.Obsidian.ServiceCollectionExtensions.AddObsidianManagers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName: CG.Obsidian.ServiceCollectionExtensions.AddObsidianManagers(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddObsidianManagers(IServiceCollection, IConfiguration, ServiceLifetime)
- uid: CG.Obsidian.ServiceCollectionExtensions.AddObsidianManagers*
  name: AddObsidianManagers
  href: api/CG.Obsidian.ServiceCollectionExtensions.html#CG_Obsidian_ServiceCollectionExtensions_AddObsidianManagers_
  commentId: Overload:CG.Obsidian.ServiceCollectionExtensions.AddObsidianManagers
  isSpec: "True"
  fullName: CG.Obsidian.ServiceCollectionExtensions.AddObsidianManagers
  nameWithType: ServiceCollectionExtensions.AddObsidianManagers
- uid: CG.Obsidian.ServiceCollectionExtensions.AddObsidianStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: AddObsidianStores(IServiceCollection, IConfiguration, ServiceLifetime)
  href: api/CG.Obsidian.ServiceCollectionExtensions.html#CG_Obsidian_ServiceCollectionExtensions_AddObsidianStores_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_Microsoft_Extensions_DependencyInjection_ServiceLifetime_
  commentId: M:CG.Obsidian.ServiceCollectionExtensions.AddObsidianStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName: CG.Obsidian.ServiceCollectionExtensions.AddObsidianStores(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddObsidianStores(IServiceCollection, IConfiguration, ServiceLifetime)
- uid: CG.Obsidian.ServiceCollectionExtensions.AddObsidianStores*
  name: AddObsidianStores
  href: api/CG.Obsidian.ServiceCollectionExtensions.html#CG_Obsidian_ServiceCollectionExtensions_AddObsidianStores_
  commentId: Overload:CG.Obsidian.ServiceCollectionExtensions.AddObsidianStores
  isSpec: "True"
  fullName: CG.Obsidian.ServiceCollectionExtensions.AddObsidianStores
  nameWithType: ServiceCollectionExtensions.AddObsidianStores
- uid: CG.Obsidian.SqlServer
  name: CG.Obsidian.SqlServer
  href: api/CG.Obsidian.SqlServer.html
  commentId: N:CG.Obsidian.SqlServer
  fullName: CG.Obsidian.SqlServer
  nameWithType: CG.Obsidian.SqlServer
- uid: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory
  name: DesignTimeObsidianDbContextFactory
  href: api/CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.html
  commentId: T:CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory
  fullName: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory
  nameWithType: DesignTimeObsidianDbContextFactory
- uid: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext(System.String[])
  name: CreateDbContext(String[])
  href: api/CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.html#CG_Obsidian_SqlServer_DesignTimeObsidianDbContextFactory_CreateDbContext_System_String___
  commentId: M:CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext(System.String[])
  name.vb: CreateDbContext(String())
  fullName: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext(System.String[])
  fullName.vb: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext(System.String())
  nameWithType: DesignTimeObsidianDbContextFactory.CreateDbContext(String[])
  nameWithType.vb: DesignTimeObsidianDbContextFactory.CreateDbContext(String())
- uid: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext*
  name: CreateDbContext
  href: api/CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.html#CG_Obsidian_SqlServer_DesignTimeObsidianDbContextFactory_CreateDbContext_
  commentId: Overload:CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.DesignTimeObsidianDbContextFactory.CreateDbContext
  nameWithType: DesignTimeObsidianDbContextFactory.CreateDbContext
- uid: CG.Obsidian.SqlServer.Migrations
  name: CG.Obsidian.SqlServer.Migrations
  href: api/CG.Obsidian.SqlServer.Migrations.html
  commentId: N:CG.Obsidian.SqlServer.Migrations
  fullName: CG.Obsidian.SqlServer.Migrations
  nameWithType: CG.Obsidian.SqlServer.Migrations
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate
  name: InitialCreate
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html
  commentId: T:CG.Obsidian.SqlServer.Migrations.InitialCreate
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate
  nameWithType: InitialCreate
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: BuildTargetModel(ModelBuilder)
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html#CG_Obsidian_SqlServer_Migrations_InitialCreate_BuildTargetModel_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:CG.Obsidian.SqlServer.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: InitialCreate.BuildTargetModel(ModelBuilder)
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate.BuildTargetModel*
  name: BuildTargetModel
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html#CG_Obsidian_SqlServer_Migrations_InitialCreate_BuildTargetModel_
  commentId: Overload:CG.Obsidian.SqlServer.Migrations.InitialCreate.BuildTargetModel
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate.BuildTargetModel
  nameWithType: InitialCreate.BuildTargetModel
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)
  name: Down(MigrationBuilder)
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html#CG_Obsidian_SqlServer_Migrations_InitialCreate_Down_Microsoft_EntityFrameworkCore_Migrations_MigrationBuilder_
  commentId: M:CG.Obsidian.SqlServer.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)
  nameWithType: InitialCreate.Down(MigrationBuilder)
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate.Down*
  name: Down
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html#CG_Obsidian_SqlServer_Migrations_InitialCreate_Down_
  commentId: Overload:CG.Obsidian.SqlServer.Migrations.InitialCreate.Down
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate.Down
  nameWithType: InitialCreate.Down
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)
  name: Up(MigrationBuilder)
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html#CG_Obsidian_SqlServer_Migrations_InitialCreate_Up_Microsoft_EntityFrameworkCore_Migrations_MigrationBuilder_
  commentId: M:CG.Obsidian.SqlServer.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)
  nameWithType: InitialCreate.Up(MigrationBuilder)
- uid: CG.Obsidian.SqlServer.Migrations.InitialCreate.Up*
  name: Up
  href: api/CG.Obsidian.SqlServer.Migrations.InitialCreate.html#CG_Obsidian_SqlServer_Migrations_InitialCreate_Up_
  commentId: Overload:CG.Obsidian.SqlServer.Migrations.InitialCreate.Up
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Migrations.InitialCreate.Up
  nameWithType: InitialCreate.Up
- uid: CG.Obsidian.SqlServer.ObsidianDbContext
  name: ObsidianDbContext
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html
  commentId: T:CG.Obsidian.SqlServer.ObsidianDbContext
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext
  nameWithType: ObsidianDbContext
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{CG.Obsidian.SqlServer.ObsidianDbContext})
  name: ObsidianDbContext(DbContextOptions<ObsidianDbContext>)
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext__ctor_Microsoft_EntityFrameworkCore_DbContextOptions_CG_Obsidian_SqlServer_ObsidianDbContext__
  commentId: M:CG.Obsidian.SqlServer.ObsidianDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{CG.Obsidian.SqlServer.ObsidianDbContext})
  name.vb: ObsidianDbContext(DbContextOptions(Of ObsidianDbContext))
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.ObsidianDbContext(Microsoft.EntityFrameworkCore.DbContextOptions<CG.Obsidian.SqlServer.ObsidianDbContext>)
  fullName.vb: CG.Obsidian.SqlServer.ObsidianDbContext.ObsidianDbContext(Microsoft.EntityFrameworkCore.DbContextOptions(Of CG.Obsidian.SqlServer.ObsidianDbContext))
  nameWithType: ObsidianDbContext.ObsidianDbContext(DbContextOptions<ObsidianDbContext>)
  nameWithType.vb: ObsidianDbContext.ObsidianDbContext(DbContextOptions(Of ObsidianDbContext))
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.#ctor*
  name: ObsidianDbContext
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext__ctor_
  commentId: Overload:CG.Obsidian.SqlServer.ObsidianDbContext.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.ObsidianDbContext
  nameWithType: ObsidianDbContext.ObsidianDbContext
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.FileExtensions
  name: FileExtensions
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext_FileExtensions
  commentId: P:CG.Obsidian.SqlServer.ObsidianDbContext.FileExtensions
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.FileExtensions
  nameWithType: ObsidianDbContext.FileExtensions
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.FileExtensions*
  name: FileExtensions
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext_FileExtensions_
  commentId: Overload:CG.Obsidian.SqlServer.ObsidianDbContext.FileExtensions
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.FileExtensions
  nameWithType: ObsidianDbContext.FileExtensions
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.MimeTypes
  name: MimeTypes
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext_MimeTypes
  commentId: P:CG.Obsidian.SqlServer.ObsidianDbContext.MimeTypes
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.MimeTypes
  nameWithType: ObsidianDbContext.MimeTypes
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.MimeTypes*
  name: MimeTypes
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext_MimeTypes_
  commentId: Overload:CG.Obsidian.SqlServer.ObsidianDbContext.MimeTypes
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.MimeTypes
  nameWithType: ObsidianDbContext.MimeTypes
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: OnModelCreating(ModelBuilder)
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext_OnModelCreating_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:CG.Obsidian.SqlServer.ObsidianDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: ObsidianDbContext.OnModelCreating(ModelBuilder)
- uid: CG.Obsidian.SqlServer.ObsidianDbContext.OnModelCreating*
  name: OnModelCreating
  href: api/CG.Obsidian.SqlServer.ObsidianDbContext.html#CG_Obsidian_SqlServer_ObsidianDbContext_OnModelCreating_
  commentId: Overload:CG.Obsidian.SqlServer.ObsidianDbContext.OnModelCreating
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.ObsidianDbContext.OnModelCreating
  nameWithType: ObsidianDbContext.OnModelCreating
- uid: CG.Obsidian.SqlServer.Repositories
  name: CG.Obsidian.SqlServer.Repositories
  href: api/CG.Obsidian.SqlServer.Repositories.html
  commentId: N:CG.Obsidian.SqlServer.Repositories
  fullName: CG.Obsidian.SqlServer.Repositories
  nameWithType: CG.Obsidian.SqlServer.Repositories
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository
  name: FileExtensionRepository
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html
  commentId: T:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository
  nameWithType: FileExtensionRepository
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.#ctor(Microsoft.Extensions.Options.IOptions{CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions},Microsoft.EntityFrameworkCore.IDbContextFactory{CG.Obsidian.SqlServer.ObsidianDbContext},Microsoft.Extensions.Logging.ILogger{CG.Obsidian.SqlServer.Repositories.FileExtensionRepository})
  name: FileExtensionRepository(IOptions<ObsidianRepositoryOptions>, IDbContextFactory<ObsidianDbContext>, ILogger<FileExtensionRepository>)
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository__ctor_Microsoft_Extensions_Options_IOptions_CG_Obsidian_SqlServer_Repositories_Options_ObsidianRepositoryOptions__Microsoft_EntityFrameworkCore_IDbContextFactory_CG_Obsidian_SqlServer_ObsidianDbContext__Microsoft_Extensions_Logging_ILogger_CG_Obsidian_SqlServer_Repositories_FileExtensionRepository__
  commentId: M:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.#ctor(Microsoft.Extensions.Options.IOptions{CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions},Microsoft.EntityFrameworkCore.IDbContextFactory{CG.Obsidian.SqlServer.ObsidianDbContext},Microsoft.Extensions.Logging.ILogger{CG.Obsidian.SqlServer.Repositories.FileExtensionRepository})
  name.vb: FileExtensionRepository(IOptions(Of ObsidianRepositoryOptions), IDbContextFactory(Of ObsidianDbContext), ILogger(Of FileExtensionRepository))
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.FileExtensionRepository(Microsoft.Extensions.Options.IOptions<CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions>, Microsoft.EntityFrameworkCore.IDbContextFactory<CG.Obsidian.SqlServer.ObsidianDbContext>, Microsoft.Extensions.Logging.ILogger<CG.Obsidian.SqlServer.Repositories.FileExtensionRepository>)
  fullName.vb: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.FileExtensionRepository(Microsoft.Extensions.Options.IOptions(Of CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions), Microsoft.EntityFrameworkCore.IDbContextFactory(Of CG.Obsidian.SqlServer.ObsidianDbContext), Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.SqlServer.Repositories.FileExtensionRepository))
  nameWithType: FileExtensionRepository.FileExtensionRepository(IOptions<ObsidianRepositoryOptions>, IDbContextFactory<ObsidianDbContext>, ILogger<FileExtensionRepository>)
  nameWithType.vb: FileExtensionRepository.FileExtensionRepository(IOptions(Of ObsidianRepositoryOptions), IDbContextFactory(Of ObsidianDbContext), ILogger(Of FileExtensionRepository))
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.#ctor*
  name: FileExtensionRepository
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository__ctor_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.FileExtensionRepository
  nameWithType: FileExtensionRepository.FileExtensionRepository
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: AddAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_AddAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AddAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: FileExtensionRepository.AddAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_AddAsync_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AddAsync
  nameWithType: FileExtensionRepository.AddAsync
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_AsQueryable
  commentId: M:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AsQueryable
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AsQueryable()
  nameWithType: FileExtensionRepository.AsQueryable()
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_AsQueryable_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.AsQueryable
  nameWithType: FileExtensionRepository.AsQueryable
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.DeleteAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: DeleteAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_DeleteAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.DeleteAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.DeleteAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: FileExtensionRepository.DeleteAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_DeleteAsync_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.DeleteAsync
  nameWithType: FileExtensionRepository.DeleteAsync
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.Logger
  name: Logger
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_Logger
  commentId: P:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.Logger
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.Logger
  nameWithType: FileExtensionRepository.Logger
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.Logger*
  name: Logger
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_Logger_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.Logger
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.Logger
  nameWithType: FileExtensionRepository.Logger
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: UpdateAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_UpdateAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.UpdateAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: FileExtensionRepository.UpdateAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.html#CG_Obsidian_SqlServer_Repositories_FileExtensionRepository_UpdateAsync_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.FileExtensionRepository.UpdateAsync
  nameWithType: FileExtensionRepository.UpdateAsync
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository
  name: MimeTypeRepository
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html
  commentId: T:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository
  nameWithType: MimeTypeRepository
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.#ctor(Microsoft.Extensions.Options.IOptions{CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions},Microsoft.EntityFrameworkCore.IDbContextFactory{CG.Obsidian.SqlServer.ObsidianDbContext},Microsoft.Extensions.Logging.ILogger{CG.Obsidian.SqlServer.Repositories.MimeTypeRepository})
  name: MimeTypeRepository(IOptions<ObsidianRepositoryOptions>, IDbContextFactory<ObsidianDbContext>, ILogger<MimeTypeRepository>)
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository__ctor_Microsoft_Extensions_Options_IOptions_CG_Obsidian_SqlServer_Repositories_Options_ObsidianRepositoryOptions__Microsoft_EntityFrameworkCore_IDbContextFactory_CG_Obsidian_SqlServer_ObsidianDbContext__Microsoft_Extensions_Logging_ILogger_CG_Obsidian_SqlServer_Repositories_MimeTypeRepository__
  commentId: M:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.#ctor(Microsoft.Extensions.Options.IOptions{CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions},Microsoft.EntityFrameworkCore.IDbContextFactory{CG.Obsidian.SqlServer.ObsidianDbContext},Microsoft.Extensions.Logging.ILogger{CG.Obsidian.SqlServer.Repositories.MimeTypeRepository})
  name.vb: MimeTypeRepository(IOptions(Of ObsidianRepositoryOptions), IDbContextFactory(Of ObsidianDbContext), ILogger(Of MimeTypeRepository))
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.MimeTypeRepository(Microsoft.Extensions.Options.IOptions<CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions>, Microsoft.EntityFrameworkCore.IDbContextFactory<CG.Obsidian.SqlServer.ObsidianDbContext>, Microsoft.Extensions.Logging.ILogger<CG.Obsidian.SqlServer.Repositories.MimeTypeRepository>)
  fullName.vb: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.MimeTypeRepository(Microsoft.Extensions.Options.IOptions(Of CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions), Microsoft.EntityFrameworkCore.IDbContextFactory(Of CG.Obsidian.SqlServer.ObsidianDbContext), Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.SqlServer.Repositories.MimeTypeRepository))
  nameWithType: MimeTypeRepository.MimeTypeRepository(IOptions<ObsidianRepositoryOptions>, IDbContextFactory<ObsidianDbContext>, ILogger<MimeTypeRepository>)
  nameWithType.vb: MimeTypeRepository.MimeTypeRepository(IOptions(Of ObsidianRepositoryOptions), IDbContextFactory(Of ObsidianDbContext), ILogger(Of MimeTypeRepository))
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.#ctor*
  name: MimeTypeRepository
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository__ctor_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.MimeTypeRepository
  nameWithType: MimeTypeRepository.MimeTypeRepository
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: AddAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_AddAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AddAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: MimeTypeRepository.AddAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_AddAsync_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AddAsync
  nameWithType: MimeTypeRepository.AddAsync
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_AsQueryable
  commentId: M:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AsQueryable
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AsQueryable()
  nameWithType: MimeTypeRepository.AsQueryable()
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_AsQueryable_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.AsQueryable
  nameWithType: MimeTypeRepository.AsQueryable
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.DeleteAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: DeleteAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_DeleteAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.DeleteAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.DeleteAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: MimeTypeRepository.DeleteAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_DeleteAsync_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.DeleteAsync
  nameWithType: MimeTypeRepository.DeleteAsync
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.Logger
  name: Logger
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_Logger
  commentId: P:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.Logger
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.Logger
  nameWithType: MimeTypeRepository.Logger
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.Logger*
  name: Logger
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_Logger_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.Logger
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.Logger
  nameWithType: MimeTypeRepository.Logger
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: UpdateAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_UpdateAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.UpdateAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: MimeTypeRepository.UpdateAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.html#CG_Obsidian_SqlServer_Repositories_MimeTypeRepository_UpdateAsync_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.MimeTypeRepository.UpdateAsync
  nameWithType: MimeTypeRepository.UpdateAsync
- uid: CG.Obsidian.SqlServer.Repositories.Options
  name: CG.Obsidian.SqlServer.Repositories.Options
  href: api/CG.Obsidian.SqlServer.Repositories.Options.html
  commentId: N:CG.Obsidian.SqlServer.Repositories.Options
  fullName: CG.Obsidian.SqlServer.Repositories.Options
  nameWithType: CG.Obsidian.SqlServer.Repositories.Options
- uid: CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions
  name: ObsidianRepositoryOptions
  href: api/CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.html
  commentId: T:CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions
  fullName: CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions
  nameWithType: ObsidianRepositoryOptions
- uid: CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.LogAllQueries
  name: LogAllQueries
  href: api/CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.html#CG_Obsidian_SqlServer_Repositories_Options_ObsidianRepositoryOptions_LogAllQueries
  commentId: P:CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.LogAllQueries
  fullName: CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.LogAllQueries
  nameWithType: ObsidianRepositoryOptions.LogAllQueries
- uid: CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.LogAllQueries*
  name: LogAllQueries
  href: api/CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.html#CG_Obsidian_SqlServer_Repositories_Options_ObsidianRepositoryOptions_LogAllQueries_
  commentId: Overload:CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.LogAllQueries
  isSpec: "True"
  fullName: CG.Obsidian.SqlServer.Repositories.Options.ObsidianRepositoryOptions.LogAllQueries
  nameWithType: ObsidianRepositoryOptions.LogAllQueries
- uid: CG.Obsidian.Stores
  name: CG.Obsidian.Stores
  href: api/CG.Obsidian.Stores.html
  commentId: N:CG.Obsidian.Stores
  fullName: CG.Obsidian.Stores
  nameWithType: CG.Obsidian.Stores
- uid: CG.Obsidian.Stores.FileExtensionStore
  name: FileExtensionStore
  href: api/CG.Obsidian.Stores.FileExtensionStore.html
  commentId: T:CG.Obsidian.Stores.FileExtensionStore
  fullName: CG.Obsidian.Stores.FileExtensionStore
  nameWithType: FileExtensionStore
- uid: CG.Obsidian.Stores.FileExtensionStore.#ctor(CG.Obsidian.Repositories.IFileExtensionRepository,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Stores.FileExtensionStore})
  name: FileExtensionStore(IFileExtensionRepository, ILogger<FileExtensionStore>)
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore__ctor_CG_Obsidian_Repositories_IFileExtensionRepository_Microsoft_Extensions_Logging_ILogger_CG_Obsidian_Stores_FileExtensionStore__
  commentId: M:CG.Obsidian.Stores.FileExtensionStore.#ctor(CG.Obsidian.Repositories.IFileExtensionRepository,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Stores.FileExtensionStore})
  name.vb: FileExtensionStore(IFileExtensionRepository, ILogger(Of FileExtensionStore))
  fullName: CG.Obsidian.Stores.FileExtensionStore.FileExtensionStore(CG.Obsidian.Repositories.IFileExtensionRepository, Microsoft.Extensions.Logging.ILogger<CG.Obsidian.Stores.FileExtensionStore>)
  fullName.vb: CG.Obsidian.Stores.FileExtensionStore.FileExtensionStore(CG.Obsidian.Repositories.IFileExtensionRepository, Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.Stores.FileExtensionStore))
  nameWithType: FileExtensionStore.FileExtensionStore(IFileExtensionRepository, ILogger<FileExtensionStore>)
  nameWithType.vb: FileExtensionStore.FileExtensionStore(IFileExtensionRepository, ILogger(Of FileExtensionStore))
- uid: CG.Obsidian.Stores.FileExtensionStore.#ctor*
  name: FileExtensionStore
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore__ctor_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.FileExtensionStore
  nameWithType: FileExtensionStore.FileExtensionStore
- uid: CG.Obsidian.Stores.FileExtensionStore.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: AddAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_AddAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.FileExtensionStore.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.FileExtensionStore.AddAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: FileExtensionStore.AddAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Stores.FileExtensionStore.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_AddAsync_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.AddAsync
  nameWithType: FileExtensionStore.AddAsync
- uid: CG.Obsidian.Stores.FileExtensionStore.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_AsQueryable
  commentId: M:CG.Obsidian.Stores.FileExtensionStore.AsQueryable
  fullName: CG.Obsidian.Stores.FileExtensionStore.AsQueryable()
  nameWithType: FileExtensionStore.AsQueryable()
- uid: CG.Obsidian.Stores.FileExtensionStore.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_AsQueryable_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.AsQueryable
  nameWithType: FileExtensionStore.AsQueryable
- uid: CG.Obsidian.Stores.FileExtensionStore.DeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  name: DeleteAsync(Int32, Int32, CancellationToken)
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_DeleteAsync_System_Int32_System_Int32_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.FileExtensionStore.DeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.FileExtensionStore.DeleteAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType: FileExtensionStore.DeleteAsync(Int32, Int32, CancellationToken)
- uid: CG.Obsidian.Stores.FileExtensionStore.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_DeleteAsync_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.DeleteAsync
  nameWithType: FileExtensionStore.DeleteAsync
- uid: CG.Obsidian.Stores.FileExtensionStore.Logger
  name: Logger
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_Logger
  commentId: P:CG.Obsidian.Stores.FileExtensionStore.Logger
  fullName: CG.Obsidian.Stores.FileExtensionStore.Logger
  nameWithType: FileExtensionStore.Logger
- uid: CG.Obsidian.Stores.FileExtensionStore.Logger*
  name: Logger
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_Logger_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.Logger
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.Logger
  nameWithType: FileExtensionStore.Logger
- uid: CG.Obsidian.Stores.FileExtensionStore.Repository
  name: Repository
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_Repository
  commentId: P:CG.Obsidian.Stores.FileExtensionStore.Repository
  fullName: CG.Obsidian.Stores.FileExtensionStore.Repository
  nameWithType: FileExtensionStore.Repository
- uid: CG.Obsidian.Stores.FileExtensionStore.Repository*
  name: Repository
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_Repository_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.Repository
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.Repository
  nameWithType: FileExtensionStore.Repository
- uid: CG.Obsidian.Stores.FileExtensionStore.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: UpdateAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_UpdateAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.FileExtensionStore.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.FileExtensionStore.UpdateAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: FileExtensionStore.UpdateAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Stores.FileExtensionStore.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.Stores.FileExtensionStore.html#CG_Obsidian_Stores_FileExtensionStore_UpdateAsync_
  commentId: Overload:CG.Obsidian.Stores.FileExtensionStore.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.FileExtensionStore.UpdateAsync
  nameWithType: FileExtensionStore.UpdateAsync
- uid: CG.Obsidian.Stores.IFileExtensionStore
  name: IFileExtensionStore
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html
  commentId: T:CG.Obsidian.Stores.IFileExtensionStore
  fullName: CG.Obsidian.Stores.IFileExtensionStore
  nameWithType: IFileExtensionStore
- uid: CG.Obsidian.Stores.IFileExtensionStore.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: AddAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_AddAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.IFileExtensionStore.AddAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.IFileExtensionStore.AddAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: IFileExtensionStore.AddAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Stores.IFileExtensionStore.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_AddAsync_
  commentId: Overload:CG.Obsidian.Stores.IFileExtensionStore.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IFileExtensionStore.AddAsync
  nameWithType: IFileExtensionStore.AddAsync
- uid: CG.Obsidian.Stores.IFileExtensionStore.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_AsQueryable
  commentId: M:CG.Obsidian.Stores.IFileExtensionStore.AsQueryable
  fullName: CG.Obsidian.Stores.IFileExtensionStore.AsQueryable()
  nameWithType: IFileExtensionStore.AsQueryable()
- uid: CG.Obsidian.Stores.IFileExtensionStore.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_AsQueryable_
  commentId: Overload:CG.Obsidian.Stores.IFileExtensionStore.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IFileExtensionStore.AsQueryable
  nameWithType: IFileExtensionStore.AsQueryable
- uid: CG.Obsidian.Stores.IFileExtensionStore.DeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  name: DeleteAsync(Int32, Int32, CancellationToken)
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_DeleteAsync_System_Int32_System_Int32_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.IFileExtensionStore.DeleteAsync(System.Int32,System.Int32,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.IFileExtensionStore.DeleteAsync(System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType: IFileExtensionStore.DeleteAsync(Int32, Int32, CancellationToken)
- uid: CG.Obsidian.Stores.IFileExtensionStore.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_DeleteAsync_
  commentId: Overload:CG.Obsidian.Stores.IFileExtensionStore.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IFileExtensionStore.DeleteAsync
  nameWithType: IFileExtensionStore.DeleteAsync
- uid: CG.Obsidian.Stores.IFileExtensionStore.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  name: UpdateAsync(FileExtension, CancellationToken)
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_UpdateAsync_CG_Obsidian_Models_FileExtension_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.IFileExtensionStore.UpdateAsync(CG.Obsidian.Models.FileExtension,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.IFileExtensionStore.UpdateAsync(CG.Obsidian.Models.FileExtension, System.Threading.CancellationToken)
  nameWithType: IFileExtensionStore.UpdateAsync(FileExtension, CancellationToken)
- uid: CG.Obsidian.Stores.IFileExtensionStore.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.Stores.IFileExtensionStore.html#CG_Obsidian_Stores_IFileExtensionStore_UpdateAsync_
  commentId: Overload:CG.Obsidian.Stores.IFileExtensionStore.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IFileExtensionStore.UpdateAsync
  nameWithType: IFileExtensionStore.UpdateAsync
- uid: CG.Obsidian.Stores.IMimeTypeStore
  name: IMimeTypeStore
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html
  commentId: T:CG.Obsidian.Stores.IMimeTypeStore
  fullName: CG.Obsidian.Stores.IMimeTypeStore
  nameWithType: IMimeTypeStore
- uid: CG.Obsidian.Stores.IMimeTypeStore.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: AddAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_AddAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.IMimeTypeStore.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.IMimeTypeStore.AddAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: IMimeTypeStore.AddAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Stores.IMimeTypeStore.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_AddAsync_
  commentId: Overload:CG.Obsidian.Stores.IMimeTypeStore.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IMimeTypeStore.AddAsync
  nameWithType: IMimeTypeStore.AddAsync
- uid: CG.Obsidian.Stores.IMimeTypeStore.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_AsQueryable
  commentId: M:CG.Obsidian.Stores.IMimeTypeStore.AsQueryable
  fullName: CG.Obsidian.Stores.IMimeTypeStore.AsQueryable()
  nameWithType: IMimeTypeStore.AsQueryable()
- uid: CG.Obsidian.Stores.IMimeTypeStore.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_AsQueryable_
  commentId: Overload:CG.Obsidian.Stores.IMimeTypeStore.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IMimeTypeStore.AsQueryable
  nameWithType: IMimeTypeStore.AsQueryable
- uid: CG.Obsidian.Stores.IMimeTypeStore.DeleteAsync(System.Int32,System.Threading.CancellationToken)
  name: DeleteAsync(Int32, CancellationToken)
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_DeleteAsync_System_Int32_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.IMimeTypeStore.DeleteAsync(System.Int32,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.IMimeTypeStore.DeleteAsync(System.Int32, System.Threading.CancellationToken)
  nameWithType: IMimeTypeStore.DeleteAsync(Int32, CancellationToken)
- uid: CG.Obsidian.Stores.IMimeTypeStore.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_DeleteAsync_
  commentId: Overload:CG.Obsidian.Stores.IMimeTypeStore.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IMimeTypeStore.DeleteAsync
  nameWithType: IMimeTypeStore.DeleteAsync
- uid: CG.Obsidian.Stores.IMimeTypeStore.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: UpdateAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_UpdateAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.IMimeTypeStore.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.IMimeTypeStore.UpdateAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: IMimeTypeStore.UpdateAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Stores.IMimeTypeStore.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.Stores.IMimeTypeStore.html#CG_Obsidian_Stores_IMimeTypeStore_UpdateAsync_
  commentId: Overload:CG.Obsidian.Stores.IMimeTypeStore.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.IMimeTypeStore.UpdateAsync
  nameWithType: IMimeTypeStore.UpdateAsync
- uid: CG.Obsidian.Stores.MimeTypeStore
  name: MimeTypeStore
  href: api/CG.Obsidian.Stores.MimeTypeStore.html
  commentId: T:CG.Obsidian.Stores.MimeTypeStore
  fullName: CG.Obsidian.Stores.MimeTypeStore
  nameWithType: MimeTypeStore
- uid: CG.Obsidian.Stores.MimeTypeStore.#ctor(CG.Obsidian.Repositories.IMimeTypeRepository,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Stores.MimeTypeStore})
  name: MimeTypeStore(IMimeTypeRepository, ILogger<MimeTypeStore>)
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore__ctor_CG_Obsidian_Repositories_IMimeTypeRepository_Microsoft_Extensions_Logging_ILogger_CG_Obsidian_Stores_MimeTypeStore__
  commentId: M:CG.Obsidian.Stores.MimeTypeStore.#ctor(CG.Obsidian.Repositories.IMimeTypeRepository,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Stores.MimeTypeStore})
  name.vb: MimeTypeStore(IMimeTypeRepository, ILogger(Of MimeTypeStore))
  fullName: CG.Obsidian.Stores.MimeTypeStore.MimeTypeStore(CG.Obsidian.Repositories.IMimeTypeRepository, Microsoft.Extensions.Logging.ILogger<CG.Obsidian.Stores.MimeTypeStore>)
  fullName.vb: CG.Obsidian.Stores.MimeTypeStore.MimeTypeStore(CG.Obsidian.Repositories.IMimeTypeRepository, Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.Stores.MimeTypeStore))
  nameWithType: MimeTypeStore.MimeTypeStore(IMimeTypeRepository, ILogger<MimeTypeStore>)
  nameWithType.vb: MimeTypeStore.MimeTypeStore(IMimeTypeRepository, ILogger(Of MimeTypeStore))
- uid: CG.Obsidian.Stores.MimeTypeStore.#ctor*
  name: MimeTypeStore
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore__ctor_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.MimeTypeStore
  nameWithType: MimeTypeStore.MimeTypeStore
- uid: CG.Obsidian.Stores.MimeTypeStore.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: AddAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_AddAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.MimeTypeStore.AddAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.MimeTypeStore.AddAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: MimeTypeStore.AddAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Stores.MimeTypeStore.AddAsync*
  name: AddAsync
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_AddAsync_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.AddAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.AddAsync
  nameWithType: MimeTypeStore.AddAsync
- uid: CG.Obsidian.Stores.MimeTypeStore.AsQueryable
  name: AsQueryable()
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_AsQueryable
  commentId: M:CG.Obsidian.Stores.MimeTypeStore.AsQueryable
  fullName: CG.Obsidian.Stores.MimeTypeStore.AsQueryable()
  nameWithType: MimeTypeStore.AsQueryable()
- uid: CG.Obsidian.Stores.MimeTypeStore.AsQueryable*
  name: AsQueryable
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_AsQueryable_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.AsQueryable
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.AsQueryable
  nameWithType: MimeTypeStore.AsQueryable
- uid: CG.Obsidian.Stores.MimeTypeStore.DeleteAsync(System.Int32,System.Threading.CancellationToken)
  name: DeleteAsync(Int32, CancellationToken)
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_DeleteAsync_System_Int32_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.MimeTypeStore.DeleteAsync(System.Int32,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.MimeTypeStore.DeleteAsync(System.Int32, System.Threading.CancellationToken)
  nameWithType: MimeTypeStore.DeleteAsync(Int32, CancellationToken)
- uid: CG.Obsidian.Stores.MimeTypeStore.DeleteAsync*
  name: DeleteAsync
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_DeleteAsync_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.DeleteAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.DeleteAsync
  nameWithType: MimeTypeStore.DeleteAsync
- uid: CG.Obsidian.Stores.MimeTypeStore.Logger
  name: Logger
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_Logger
  commentId: P:CG.Obsidian.Stores.MimeTypeStore.Logger
  fullName: CG.Obsidian.Stores.MimeTypeStore.Logger
  nameWithType: MimeTypeStore.Logger
- uid: CG.Obsidian.Stores.MimeTypeStore.Logger*
  name: Logger
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_Logger_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.Logger
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.Logger
  nameWithType: MimeTypeStore.Logger
- uid: CG.Obsidian.Stores.MimeTypeStore.Repository
  name: Repository
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_Repository
  commentId: P:CG.Obsidian.Stores.MimeTypeStore.Repository
  fullName: CG.Obsidian.Stores.MimeTypeStore.Repository
  nameWithType: MimeTypeStore.Repository
- uid: CG.Obsidian.Stores.MimeTypeStore.Repository*
  name: Repository
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_Repository_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.Repository
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.Repository
  nameWithType: MimeTypeStore.Repository
- uid: CG.Obsidian.Stores.MimeTypeStore.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  name: UpdateAsync(MimeType, CancellationToken)
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_UpdateAsync_CG_Obsidian_Models_MimeType_System_Threading_CancellationToken_
  commentId: M:CG.Obsidian.Stores.MimeTypeStore.UpdateAsync(CG.Obsidian.Models.MimeType,System.Threading.CancellationToken)
  fullName: CG.Obsidian.Stores.MimeTypeStore.UpdateAsync(CG.Obsidian.Models.MimeType, System.Threading.CancellationToken)
  nameWithType: MimeTypeStore.UpdateAsync(MimeType, CancellationToken)
- uid: CG.Obsidian.Stores.MimeTypeStore.UpdateAsync*
  name: UpdateAsync
  href: api/CG.Obsidian.Stores.MimeTypeStore.html#CG_Obsidian_Stores_MimeTypeStore_UpdateAsync_
  commentId: Overload:CG.Obsidian.Stores.MimeTypeStore.UpdateAsync
  isSpec: "True"
  fullName: CG.Obsidian.Stores.MimeTypeStore.UpdateAsync
  nameWithType: MimeTypeStore.UpdateAsync
- uid: CG.Obsidian.Web
  name: CG.Obsidian.Web
  href: api/CG.Obsidian.Web.html
  commentId: N:CG.Obsidian.Web
  fullName: CG.Obsidian.Web
  nameWithType: CG.Obsidian.Web
- uid: CG.Obsidian.Web.Controllers
  name: CG.Obsidian.Web.Controllers
  href: api/CG.Obsidian.Web.Controllers.html
  commentId: N:CG.Obsidian.Web.Controllers
  fullName: CG.Obsidian.Web.Controllers
  nameWithType: CG.Obsidian.Web.Controllers
- uid: CG.Obsidian.Web.Controllers.MimeTypesController
  name: MimeTypesController
  href: api/CG.Obsidian.Web.Controllers.MimeTypesController.html
  commentId: T:CG.Obsidian.Web.Controllers.MimeTypesController
  fullName: CG.Obsidian.Web.Controllers.MimeTypesController
  nameWithType: MimeTypesController
- uid: CG.Obsidian.Web.Controllers.MimeTypesController.#ctor(CG.Obsidian.Managers.IMimeTypeManager,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Web.Controllers.MimeTypesController})
  name: MimeTypesController(IMimeTypeManager, ILogger<MimeTypesController>)
  href: api/CG.Obsidian.Web.Controllers.MimeTypesController.html#CG_Obsidian_Web_Controllers_MimeTypesController__ctor_CG_Obsidian_Managers_IMimeTypeManager_Microsoft_Extensions_Logging_ILogger_CG_Obsidian_Web_Controllers_MimeTypesController__
  commentId: M:CG.Obsidian.Web.Controllers.MimeTypesController.#ctor(CG.Obsidian.Managers.IMimeTypeManager,Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Web.Controllers.MimeTypesController})
  name.vb: MimeTypesController(IMimeTypeManager, ILogger(Of MimeTypesController))
  fullName: CG.Obsidian.Web.Controllers.MimeTypesController.MimeTypesController(CG.Obsidian.Managers.IMimeTypeManager, Microsoft.Extensions.Logging.ILogger<CG.Obsidian.Web.Controllers.MimeTypesController>)
  fullName.vb: CG.Obsidian.Web.Controllers.MimeTypesController.MimeTypesController(CG.Obsidian.Managers.IMimeTypeManager, Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.Web.Controllers.MimeTypesController))
  nameWithType: MimeTypesController.MimeTypesController(IMimeTypeManager, ILogger<MimeTypesController>)
  nameWithType.vb: MimeTypesController.MimeTypesController(IMimeTypeManager, ILogger(Of MimeTypesController))
- uid: CG.Obsidian.Web.Controllers.MimeTypesController.#ctor*
  name: MimeTypesController
  href: api/CG.Obsidian.Web.Controllers.MimeTypesController.html#CG_Obsidian_Web_Controllers_MimeTypesController__ctor_
  commentId: Overload:CG.Obsidian.Web.Controllers.MimeTypesController.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Web.Controllers.MimeTypesController.MimeTypesController
  nameWithType: MimeTypesController.MimeTypesController
- uid: CG.Obsidian.Web.Controllers.MimeTypesController.FindByExtensionAsync(System.String)
  name: FindByExtensionAsync(String)
  href: api/CG.Obsidian.Web.Controllers.MimeTypesController.html#CG_Obsidian_Web_Controllers_MimeTypesController_FindByExtensionAsync_System_String_
  commentId: M:CG.Obsidian.Web.Controllers.MimeTypesController.FindByExtensionAsync(System.String)
  fullName: CG.Obsidian.Web.Controllers.MimeTypesController.FindByExtensionAsync(System.String)
  nameWithType: MimeTypesController.FindByExtensionAsync(String)
- uid: CG.Obsidian.Web.Controllers.MimeTypesController.FindByExtensionAsync*
  name: FindByExtensionAsync
  href: api/CG.Obsidian.Web.Controllers.MimeTypesController.html#CG_Obsidian_Web_Controllers_MimeTypesController_FindByExtensionAsync_
  commentId: Overload:CG.Obsidian.Web.Controllers.MimeTypesController.FindByExtensionAsync
  isSpec: "True"
  fullName: CG.Obsidian.Web.Controllers.MimeTypesController.FindByExtensionAsync
  nameWithType: MimeTypesController.FindByExtensionAsync
- uid: CG.Obsidian.Web.Extensions
  name: CG.Obsidian.Web.Extensions
  href: api/CG.Obsidian.Web.Extensions.html
  commentId: N:CG.Obsidian.Web.Extensions
  fullName: CG.Obsidian.Web.Extensions
  nameWithType: CG.Obsidian.Web.Extensions
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions
  name: ApplicationBuilderExtensions
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html
  commentId: T:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions
  nameWithType: ApplicationBuilderExtensions
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomBlazor(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  name: UseCustomBlazor(IApplicationBuilder, IWebHostEnvironment)
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomBlazor_Microsoft_AspNetCore_Builder_IApplicationBuilder_Microsoft_AspNetCore_Hosting_IWebHostEnvironment_
  commentId: M:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomBlazor(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomBlazor(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  nameWithType: ApplicationBuilderExtensions.UseCustomBlazor(IApplicationBuilder, IWebHostEnvironment)
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomBlazor*
  name: UseCustomBlazor
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomBlazor_
  commentId: Overload:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomBlazor
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomBlazor
  nameWithType: ApplicationBuilderExtensions.UseCustomBlazor
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomHealthChecks(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  name: UseCustomHealthChecks(IApplicationBuilder, IWebHostEnvironment)
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomHealthChecks_Microsoft_AspNetCore_Builder_IApplicationBuilder_Microsoft_AspNetCore_Hosting_IWebHostEnvironment_
  commentId: M:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomHealthChecks(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomHealthChecks(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  nameWithType: ApplicationBuilderExtensions.UseCustomHealthChecks(IApplicationBuilder, IWebHostEnvironment)
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomHealthChecks*
  name: UseCustomHealthChecks
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomHealthChecks_
  commentId: Overload:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomHealthChecks
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomHealthChecks
  nameWithType: ApplicationBuilderExtensions.UseCustomHealthChecks
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomObsidian(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)
  name: UseCustomObsidian(IApplicationBuilder, IWebHostEnvironment, IConfiguration)
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomObsidian_Microsoft_AspNetCore_Builder_IApplicationBuilder_Microsoft_AspNetCore_Hosting_IWebHostEnvironment_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomObsidian(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomObsidian(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Hosting.IWebHostEnvironment, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ApplicationBuilderExtensions.UseCustomObsidian(IApplicationBuilder, IWebHostEnvironment, IConfiguration)
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomObsidian*
  name: UseCustomObsidian
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomObsidian_
  commentId: Overload:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomObsidian
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomObsidian
  nameWithType: ApplicationBuilderExtensions.UseCustomObsidian
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  name: UseCustomSwagger(IApplicationBuilder, IWebHostEnvironment)
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomSwagger_Microsoft_AspNetCore_Builder_IApplicationBuilder_Microsoft_AspNetCore_Hosting_IWebHostEnvironment_
  commentId: M:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  nameWithType: ApplicationBuilderExtensions.UseCustomSwagger(IApplicationBuilder, IWebHostEnvironment)
- uid: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomSwagger*
  name: UseCustomSwagger
  href: api/CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.html#CG_Obsidian_Web_Extensions_ApplicationBuilderExtensions_UseCustomSwagger_
  commentId: Overload:CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomSwagger
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ApplicationBuilderExtensions.UseCustomSwagger
  nameWithType: ApplicationBuilderExtensions.UseCustomSwagger
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions
  name: ServiceCollectionExtensions
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html
  commentId: T:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddCustomBlazor(IServiceCollection, IConfiguration)
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomBlazor_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServiceCollectionExtensions.AddCustomBlazor(IServiceCollection, IConfiguration)
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomBlazor*
  name: AddCustomBlazor
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomBlazor_
  commentId: Overload:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomBlazor
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomBlazor
  nameWithType: ServiceCollectionExtensions.AddCustomBlazor
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddCustomHealthChecks(IServiceCollection, IConfiguration)
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomHealthChecks_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServiceCollectionExtensions.AddCustomHealthChecks(IServiceCollection, IConfiguration)
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks*
  name: AddCustomHealthChecks
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomHealthChecks_
  commentId: Overload:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks
  nameWithType: ServiceCollectionExtensions.AddCustomHealthChecks
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddCustomIdentity(IServiceCollection, IConfiguration)
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomIdentity_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServiceCollectionExtensions.AddCustomIdentity(IServiceCollection, IConfiguration)
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomIdentity*
  name: AddCustomIdentity
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomIdentity_
  commentId: Overload:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomIdentity
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomIdentity
  nameWithType: ServiceCollectionExtensions.AddCustomIdentity
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomObsidian(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddCustomObsidian(IServiceCollection, IConfiguration)
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomObsidian_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomObsidian(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomObsidian(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServiceCollectionExtensions.AddCustomObsidian(IServiceCollection, IConfiguration)
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomObsidian*
  name: AddCustomObsidian
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomObsidian_
  commentId: Overload:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomObsidian
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomObsidian
  nameWithType: ServiceCollectionExtensions.AddCustomObsidian
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddCustomSwagger(IServiceCollection, IConfiguration)
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomSwagger_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ServiceCollectionExtensions.AddCustomSwagger(IServiceCollection, IConfiguration)
- uid: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomSwagger*
  name: AddCustomSwagger
  href: api/CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.html#CG_Obsidian_Web_Extensions_ServiceCollectionExtensions_AddCustomSwagger_
  commentId: Overload:CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomSwagger
  isSpec: "True"
  fullName: CG.Obsidian.Web.Extensions.ServiceCollectionExtensions.AddCustomSwagger
  nameWithType: ServiceCollectionExtensions.AddCustomSwagger
- uid: CG.Obsidian.Web.Options
  name: CG.Obsidian.Web.Options
  href: api/CG.Obsidian.Web.Options.html
  commentId: N:CG.Obsidian.Web.Options
  fullName: CG.Obsidian.Web.Options
  nameWithType: CG.Obsidian.Web.Options
- uid: CG.Obsidian.Web.Options.ApiAuthOptions
  name: ApiAuthOptions
  href: api/CG.Obsidian.Web.Options.ApiAuthOptions.html
  commentId: T:CG.Obsidian.Web.Options.ApiAuthOptions
  fullName: CG.Obsidian.Web.Options.ApiAuthOptions
  nameWithType: ApiAuthOptions
- uid: CG.Obsidian.Web.Options.ApiAuthOptions.ApiName
  name: ApiName
  href: api/CG.Obsidian.Web.Options.ApiAuthOptions.html#CG_Obsidian_Web_Options_ApiAuthOptions_ApiName
  commentId: P:CG.Obsidian.Web.Options.ApiAuthOptions.ApiName
  fullName: CG.Obsidian.Web.Options.ApiAuthOptions.ApiName
  nameWithType: ApiAuthOptions.ApiName
- uid: CG.Obsidian.Web.Options.ApiAuthOptions.ApiName*
  name: ApiName
  href: api/CG.Obsidian.Web.Options.ApiAuthOptions.html#CG_Obsidian_Web_Options_ApiAuthOptions_ApiName_
  commentId: Overload:CG.Obsidian.Web.Options.ApiAuthOptions.ApiName
  isSpec: "True"
  fullName: CG.Obsidian.Web.Options.ApiAuthOptions.ApiName
  nameWithType: ApiAuthOptions.ApiName
- uid: CG.Obsidian.Web.Options.ApiAuthOptions.ApiSecret
  name: ApiSecret
  href: api/CG.Obsidian.Web.Options.ApiAuthOptions.html#CG_Obsidian_Web_Options_ApiAuthOptions_ApiSecret
  commentId: P:CG.Obsidian.Web.Options.ApiAuthOptions.ApiSecret
  fullName: CG.Obsidian.Web.Options.ApiAuthOptions.ApiSecret
  nameWithType: ApiAuthOptions.ApiSecret
- uid: CG.Obsidian.Web.Options.ApiAuthOptions.ApiSecret*
  name: ApiSecret
  href: api/CG.Obsidian.Web.Options.ApiAuthOptions.html#CG_Obsidian_Web_Options_ApiAuthOptions_ApiSecret_
  commentId: Overload:CG.Obsidian.Web.Options.ApiAuthOptions.ApiSecret
  isSpec: "True"
  fullName: CG.Obsidian.Web.Options.ApiAuthOptions.ApiSecret
  nameWithType: ApiAuthOptions.ApiSecret
- uid: CG.Obsidian.Web.Options.IdentityOptions
  name: IdentityOptions
  href: api/CG.Obsidian.Web.Options.IdentityOptions.html
  commentId: T:CG.Obsidian.Web.Options.IdentityOptions
  fullName: CG.Obsidian.Web.Options.IdentityOptions
  nameWithType: IdentityOptions
- uid: CG.Obsidian.Web.Options.IdentityOptions.API
  name: API
  href: api/CG.Obsidian.Web.Options.IdentityOptions.html#CG_Obsidian_Web_Options_IdentityOptions_API
  commentId: P:CG.Obsidian.Web.Options.IdentityOptions.API
  fullName: CG.Obsidian.Web.Options.IdentityOptions.API
  nameWithType: IdentityOptions.API
- uid: CG.Obsidian.Web.Options.IdentityOptions.API*
  name: API
  href: api/CG.Obsidian.Web.Options.IdentityOptions.html#CG_Obsidian_Web_Options_IdentityOptions_API_
  commentId: Overload:CG.Obsidian.Web.Options.IdentityOptions.API
  isSpec: "True"
  fullName: CG.Obsidian.Web.Options.IdentityOptions.API
  nameWithType: IdentityOptions.API
- uid: CG.Obsidian.Web.Pages
  name: CG.Obsidian.Web.Pages
  href: api/CG.Obsidian.Web.Pages.html
  commentId: N:CG.Obsidian.Web.Pages
  fullName: CG.Obsidian.Web.Pages
  nameWithType: CG.Obsidian.Web.Pages
- uid: CG.Obsidian.Web.Pages.Account
  name: CG.Obsidian.Web.Pages.Account
  href: api/CG.Obsidian.Web.Pages.Account.html
  commentId: N:CG.Obsidian.Web.Pages.Account
  fullName: CG.Obsidian.Web.Pages.Account
  nameWithType: CG.Obsidian.Web.Pages.Account
- uid: CG.Obsidian.Web.Pages.Account.LoginModel
  name: LoginModel
  href: api/CG.Obsidian.Web.Pages.Account.LoginModel.html
  commentId: T:CG.Obsidian.Web.Pages.Account.LoginModel
  fullName: CG.Obsidian.Web.Pages.Account.LoginModel
  nameWithType: LoginModel
- uid: CG.Obsidian.Web.Pages.Account.LoginModel.OnGetAsync(System.String)
  name: OnGetAsync(String)
  href: api/CG.Obsidian.Web.Pages.Account.LoginModel.html#CG_Obsidian_Web_Pages_Account_LoginModel_OnGetAsync_System_String_
  commentId: M:CG.Obsidian.Web.Pages.Account.LoginModel.OnGetAsync(System.String)
  fullName: CG.Obsidian.Web.Pages.Account.LoginModel.OnGetAsync(System.String)
  nameWithType: LoginModel.OnGetAsync(String)
- uid: CG.Obsidian.Web.Pages.Account.LoginModel.OnGetAsync*
  name: OnGetAsync
  href: api/CG.Obsidian.Web.Pages.Account.LoginModel.html#CG_Obsidian_Web_Pages_Account_LoginModel_OnGetAsync_
  commentId: Overload:CG.Obsidian.Web.Pages.Account.LoginModel.OnGetAsync
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.Account.LoginModel.OnGetAsync
  nameWithType: LoginModel.OnGetAsync
- uid: CG.Obsidian.Web.Pages.Account.LogoutModel
  name: LogoutModel
  href: api/CG.Obsidian.Web.Pages.Account.LogoutModel.html
  commentId: T:CG.Obsidian.Web.Pages.Account.LogoutModel
  fullName: CG.Obsidian.Web.Pages.Account.LogoutModel
  nameWithType: LogoutModel
- uid: CG.Obsidian.Web.Pages.Account.LogoutModel.#ctor(Microsoft.Extensions.Options.IOptions{CG.Obsidian.Web.Options.IdentityOptions})
  name: LogoutModel(IOptions<IdentityOptions>)
  href: api/CG.Obsidian.Web.Pages.Account.LogoutModel.html#CG_Obsidian_Web_Pages_Account_LogoutModel__ctor_Microsoft_Extensions_Options_IOptions_CG_Obsidian_Web_Options_IdentityOptions__
  commentId: M:CG.Obsidian.Web.Pages.Account.LogoutModel.#ctor(Microsoft.Extensions.Options.IOptions{CG.Obsidian.Web.Options.IdentityOptions})
  name.vb: LogoutModel(IOptions(Of IdentityOptions))
  fullName: CG.Obsidian.Web.Pages.Account.LogoutModel.LogoutModel(Microsoft.Extensions.Options.IOptions<CG.Obsidian.Web.Options.IdentityOptions>)
  fullName.vb: CG.Obsidian.Web.Pages.Account.LogoutModel.LogoutModel(Microsoft.Extensions.Options.IOptions(Of CG.Obsidian.Web.Options.IdentityOptions))
  nameWithType: LogoutModel.LogoutModel(IOptions<IdentityOptions>)
  nameWithType.vb: LogoutModel.LogoutModel(IOptions(Of IdentityOptions))
- uid: CG.Obsidian.Web.Pages.Account.LogoutModel.#ctor*
  name: LogoutModel
  href: api/CG.Obsidian.Web.Pages.Account.LogoutModel.html#CG_Obsidian_Web_Pages_Account_LogoutModel__ctor_
  commentId: Overload:CG.Obsidian.Web.Pages.Account.LogoutModel.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.Account.LogoutModel.LogoutModel
  nameWithType: LogoutModel.LogoutModel
- uid: CG.Obsidian.Web.Pages.Account.LogoutModel.OnPostAsync
  name: OnPostAsync()
  href: api/CG.Obsidian.Web.Pages.Account.LogoutModel.html#CG_Obsidian_Web_Pages_Account_LogoutModel_OnPostAsync
  commentId: M:CG.Obsidian.Web.Pages.Account.LogoutModel.OnPostAsync
  fullName: CG.Obsidian.Web.Pages.Account.LogoutModel.OnPostAsync()
  nameWithType: LogoutModel.OnPostAsync()
- uid: CG.Obsidian.Web.Pages.Account.LogoutModel.OnPostAsync*
  name: OnPostAsync
  href: api/CG.Obsidian.Web.Pages.Account.LogoutModel.html#CG_Obsidian_Web_Pages_Account_LogoutModel_OnPostAsync_
  commentId: Overload:CG.Obsidian.Web.Pages.Account.LogoutModel.OnPostAsync
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.Account.LogoutModel.OnPostAsync
  nameWithType: LogoutModel.OnPostAsync
- uid: CG.Obsidian.Web.Pages.ErrorModel
  name: ErrorModel
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html
  commentId: T:CG.Obsidian.Web.Pages.ErrorModel
  fullName: CG.Obsidian.Web.Pages.ErrorModel
  nameWithType: ErrorModel
- uid: CG.Obsidian.Web.Pages.ErrorModel.#ctor(Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Web.Pages.ErrorModel})
  name: ErrorModel(ILogger<ErrorModel>)
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel__ctor_Microsoft_Extensions_Logging_ILogger_CG_Obsidian_Web_Pages_ErrorModel__
  commentId: M:CG.Obsidian.Web.Pages.ErrorModel.#ctor(Microsoft.Extensions.Logging.ILogger{CG.Obsidian.Web.Pages.ErrorModel})
  name.vb: ErrorModel(ILogger(Of ErrorModel))
  fullName: CG.Obsidian.Web.Pages.ErrorModel.ErrorModel(Microsoft.Extensions.Logging.ILogger<CG.Obsidian.Web.Pages.ErrorModel>)
  fullName.vb: CG.Obsidian.Web.Pages.ErrorModel.ErrorModel(Microsoft.Extensions.Logging.ILogger(Of CG.Obsidian.Web.Pages.ErrorModel))
  nameWithType: ErrorModel.ErrorModel(ILogger<ErrorModel>)
  nameWithType.vb: ErrorModel.ErrorModel(ILogger(Of ErrorModel))
- uid: CG.Obsidian.Web.Pages.ErrorModel.#ctor*
  name: ErrorModel
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel__ctor_
  commentId: Overload:CG.Obsidian.Web.Pages.ErrorModel.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.ErrorModel.ErrorModel
  nameWithType: ErrorModel.ErrorModel
- uid: CG.Obsidian.Web.Pages.ErrorModel.OnGet
  name: OnGet()
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel_OnGet
  commentId: M:CG.Obsidian.Web.Pages.ErrorModel.OnGet
  fullName: CG.Obsidian.Web.Pages.ErrorModel.OnGet()
  nameWithType: ErrorModel.OnGet()
- uid: CG.Obsidian.Web.Pages.ErrorModel.OnGet*
  name: OnGet
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel_OnGet_
  commentId: Overload:CG.Obsidian.Web.Pages.ErrorModel.OnGet
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.ErrorModel.OnGet
  nameWithType: ErrorModel.OnGet
- uid: CG.Obsidian.Web.Pages.ErrorModel.RequestId
  name: RequestId
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel_RequestId
  commentId: P:CG.Obsidian.Web.Pages.ErrorModel.RequestId
  fullName: CG.Obsidian.Web.Pages.ErrorModel.RequestId
  nameWithType: ErrorModel.RequestId
- uid: CG.Obsidian.Web.Pages.ErrorModel.RequestId*
  name: RequestId
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel_RequestId_
  commentId: Overload:CG.Obsidian.Web.Pages.ErrorModel.RequestId
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.ErrorModel.RequestId
  nameWithType: ErrorModel.RequestId
- uid: CG.Obsidian.Web.Pages.ErrorModel.ShowRequestId
  name: ShowRequestId
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel_ShowRequestId
  commentId: P:CG.Obsidian.Web.Pages.ErrorModel.ShowRequestId
  fullName: CG.Obsidian.Web.Pages.ErrorModel.ShowRequestId
  nameWithType: ErrorModel.ShowRequestId
- uid: CG.Obsidian.Web.Pages.ErrorModel.ShowRequestId*
  name: ShowRequestId
  href: api/CG.Obsidian.Web.Pages.ErrorModel.html#CG_Obsidian_Web_Pages_ErrorModel_ShowRequestId_
  commentId: Overload:CG.Obsidian.Web.Pages.ErrorModel.ShowRequestId
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.ErrorModel.ShowRequestId
  nameWithType: ErrorModel.ShowRequestId
- uid: CG.Obsidian.Web.Pages.MimeTypes
  name: CG.Obsidian.Web.Pages.MimeTypes
  href: api/CG.Obsidian.Web.Pages.MimeTypes.html
  commentId: N:CG.Obsidian.Web.Pages.MimeTypes
  fullName: CG.Obsidian.Web.Pages.MimeTypes
  nameWithType: CG.Obsidian.Web.Pages.MimeTypes
- uid: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog
  name: FileExtensionEditDialog
  href: api/CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.html
  commentId: T:CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog
  fullName: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog
  nameWithType: FileExtensionEditDialog
- uid: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Caption
  name: Caption
  href: api/CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_FileExtensionEditDialog_Caption
  commentId: P:CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Caption
  fullName: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Caption
  nameWithType: FileExtensionEditDialog.Caption
- uid: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Caption*
  name: Caption
  href: api/CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_FileExtensionEditDialog_Caption_
  commentId: Overload:CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Caption
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Caption
  nameWithType: FileExtensionEditDialog.Caption
- uid: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Model
  name: Model
  href: api/CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_FileExtensionEditDialog_Model
  commentId: P:CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Model
  fullName: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Model
  nameWithType: FileExtensionEditDialog.Model
- uid: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Model*
  name: Model
  href: api/CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_FileExtensionEditDialog_Model_
  commentId: Overload:CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Model
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.MimeTypes.FileExtensionEditDialog.Model
  nameWithType: FileExtensionEditDialog.Model
- uid: CG.Obsidian.Web.Pages.MimeTypes.Index
  name: Index
  href: api/CG.Obsidian.Web.Pages.MimeTypes.Index.html
  commentId: T:CG.Obsidian.Web.Pages.MimeTypes.Index
  fullName: CG.Obsidian.Web.Pages.MimeTypes.Index
  nameWithType: Index
- uid: CG.Obsidian.Web.Pages.MimeTypes.Index.OnInitializedAsync
  name: OnInitializedAsync()
  href: api/CG.Obsidian.Web.Pages.MimeTypes.Index.html#CG_Obsidian_Web_Pages_MimeTypes_Index_OnInitializedAsync
  commentId: M:CG.Obsidian.Web.Pages.MimeTypes.Index.OnInitializedAsync
  fullName: CG.Obsidian.Web.Pages.MimeTypes.Index.OnInitializedAsync()
  nameWithType: Index.OnInitializedAsync()
- uid: CG.Obsidian.Web.Pages.MimeTypes.Index.OnInitializedAsync*
  name: OnInitializedAsync
  href: api/CG.Obsidian.Web.Pages.MimeTypes.Index.html#CG_Obsidian_Web_Pages_MimeTypes_Index_OnInitializedAsync_
  commentId: Overload:CG.Obsidian.Web.Pages.MimeTypes.Index.OnInitializedAsync
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.MimeTypes.Index.OnInitializedAsync
  nameWithType: Index.OnInitializedAsync
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog
  name: MimeTypeEditDialog
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html
  commentId: T:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog
  nameWithType: MimeTypeEditDialog
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Caption
  name: Caption
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_MimeTypeEditDialog_Caption
  commentId: P:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Caption
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Caption
  nameWithType: MimeTypeEditDialog.Caption
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Caption*
  name: Caption
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_MimeTypeEditDialog_Caption_
  commentId: Overload:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Caption
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Caption
  nameWithType: MimeTypeEditDialog.Caption
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Model
  name: Model
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_MimeTypeEditDialog_Model
  commentId: P:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Model
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Model
  nameWithType: MimeTypeEditDialog.Model
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Model*
  name: Model
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_MimeTypeEditDialog_Model_
  commentId: Overload:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Model
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.Model
  nameWithType: MimeTypeEditDialog.Model
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.OnInitializedAsync
  name: OnInitializedAsync()
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_MimeTypeEditDialog_OnInitializedAsync
  commentId: M:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.OnInitializedAsync
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.OnInitializedAsync()
  nameWithType: MimeTypeEditDialog.OnInitializedAsync()
- uid: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.OnInitializedAsync*
  name: OnInitializedAsync
  href: api/CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.html#CG_Obsidian_Web_Pages_MimeTypes_MimeTypeEditDialog_OnInitializedAsync_
  commentId: Overload:CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.OnInitializedAsync
  isSpec: "True"
  fullName: CG.Obsidian.Web.Pages.MimeTypes.MimeTypeEditDialog.OnInitializedAsync
  nameWithType: MimeTypeEditDialog.OnInitializedAsync
- uid: CG.Obsidian.Web.Program
  name: Program
  href: api/CG.Obsidian.Web.Program.html
  commentId: T:CG.Obsidian.Web.Program
  fullName: CG.Obsidian.Web.Program
  nameWithType: Program
- uid: CG.Obsidian.Web.Program.CreateHostBuilder(System.String[])
  name: CreateHostBuilder(String[])
  href: api/CG.Obsidian.Web.Program.html#CG_Obsidian_Web_Program_CreateHostBuilder_System_String___
  commentId: M:CG.Obsidian.Web.Program.CreateHostBuilder(System.String[])
  name.vb: CreateHostBuilder(String())
  fullName: CG.Obsidian.Web.Program.CreateHostBuilder(System.String[])
  fullName.vb: CG.Obsidian.Web.Program.CreateHostBuilder(System.String())
  nameWithType: Program.CreateHostBuilder(String[])
  nameWithType.vb: Program.CreateHostBuilder(String())
- uid: CG.Obsidian.Web.Program.CreateHostBuilder*
  name: CreateHostBuilder
  href: api/CG.Obsidian.Web.Program.html#CG_Obsidian_Web_Program_CreateHostBuilder_
  commentId: Overload:CG.Obsidian.Web.Program.CreateHostBuilder
  isSpec: "True"
  fullName: CG.Obsidian.Web.Program.CreateHostBuilder
  nameWithType: Program.CreateHostBuilder
- uid: CG.Obsidian.Web.Program.Main(System.String[])
  name: Main(String[])
  href: api/CG.Obsidian.Web.Program.html#CG_Obsidian_Web_Program_Main_System_String___
  commentId: M:CG.Obsidian.Web.Program.Main(System.String[])
  name.vb: Main(String())
  fullName: CG.Obsidian.Web.Program.Main(System.String[])
  fullName.vb: CG.Obsidian.Web.Program.Main(System.String())
  nameWithType: Program.Main(String[])
  nameWithType.vb: Program.Main(String())
- uid: CG.Obsidian.Web.Program.Main*
  name: Main
  href: api/CG.Obsidian.Web.Program.html#CG_Obsidian_Web_Program_Main_
  commentId: Overload:CG.Obsidian.Web.Program.Main
  isSpec: "True"
  fullName: CG.Obsidian.Web.Program.Main
  nameWithType: Program.Main
- uid: CG.Obsidian.Web.Startup
  name: Startup
  href: api/CG.Obsidian.Web.Startup.html
  commentId: T:CG.Obsidian.Web.Startup
  fullName: CG.Obsidian.Web.Startup
  nameWithType: Startup
- uid: CG.Obsidian.Web.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)
  name: Startup(IConfiguration)
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup__ctor_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:CG.Obsidian.Web.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)
  fullName: CG.Obsidian.Web.Startup.Startup(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: Startup.Startup(IConfiguration)
- uid: CG.Obsidian.Web.Startup.#ctor*
  name: Startup
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup__ctor_
  commentId: Overload:CG.Obsidian.Web.Startup.#ctor
  isSpec: "True"
  fullName: CG.Obsidian.Web.Startup.Startup
  nameWithType: Startup.Startup
- uid: CG.Obsidian.Web.Startup.Configuration
  name: Configuration
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup_Configuration
  commentId: P:CG.Obsidian.Web.Startup.Configuration
  fullName: CG.Obsidian.Web.Startup.Configuration
  nameWithType: Startup.Configuration
- uid: CG.Obsidian.Web.Startup.Configuration*
  name: Configuration
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup_Configuration_
  commentId: Overload:CG.Obsidian.Web.Startup.Configuration
  isSpec: "True"
  fullName: CG.Obsidian.Web.Startup.Configuration
  nameWithType: Startup.Configuration
- uid: CG.Obsidian.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  name: Configure(IApplicationBuilder, IWebHostEnvironment)
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup_Configure_Microsoft_AspNetCore_Builder_IApplicationBuilder_Microsoft_AspNetCore_Hosting_IWebHostEnvironment_
  commentId: M:CG.Obsidian.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  fullName: CG.Obsidian.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Hosting.IWebHostEnvironment)
  nameWithType: Startup.Configure(IApplicationBuilder, IWebHostEnvironment)
- uid: CG.Obsidian.Web.Startup.Configure*
  name: Configure
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup_Configure_
  commentId: Overload:CG.Obsidian.Web.Startup.Configure
  isSpec: "True"
  fullName: CG.Obsidian.Web.Startup.Configure
  nameWithType: Startup.Configure
- uid: CG.Obsidian.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: ConfigureServices(IServiceCollection)
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup_ConfigureServices_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  commentId: M:CG.Obsidian.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: CG.Obsidian.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: Startup.ConfigureServices(IServiceCollection)
- uid: CG.Obsidian.Web.Startup.ConfigureServices*
  name: ConfigureServices
  href: api/CG.Obsidian.Web.Startup.html#CG_Obsidian_Web_Startup_ConfigureServices_
  commentId: Overload:CG.Obsidian.Web.Startup.ConfigureServices
  isSpec: "True"
  fullName: CG.Obsidian.Web.Startup.ConfigureServices
  nameWithType: Startup.ConfigureServices
- uid: Microsoft.AspNetCore.Builder
  name: Microsoft.AspNetCore.Builder
  href: api/Microsoft.AspNetCore.Builder.html
  commentId: N:Microsoft.AspNetCore.Builder
  fullName: Microsoft.AspNetCore.Builder
  nameWithType: Microsoft.AspNetCore.Builder
- uid: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions
  name: ApplicationBuilderExtensions
  href: api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html
  commentId: T:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions
  fullName: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions
  nameWithType: ApplicationBuilderExtensions
- uid: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseSqlServerRepositories(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
  name: UseSqlServerRepositories(IApplicationBuilder, String)
  href: api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html#Microsoft_AspNetCore_Builder_ApplicationBuilderExtensions_UseSqlServerRepositories_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_String_
  commentId: M:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseSqlServerRepositories(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)
  fullName: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseSqlServerRepositories(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.String)
  nameWithType: ApplicationBuilderExtensions.UseSqlServerRepositories(IApplicationBuilder, String)
- uid: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseSqlServerRepositories*
  name: UseSqlServerRepositories
  href: api/Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.html#Microsoft_AspNetCore_Builder_ApplicationBuilderExtensions_UseSqlServerRepositories_
  commentId: Overload:Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseSqlServerRepositories
  isSpec: "True"
  fullName: Microsoft.AspNetCore.Builder.ApplicationBuilderExtensions.UseSqlServerRepositories
  nameWithType: ApplicationBuilderExtensions.UseSqlServerRepositories
- uid: Microsoft.Extensions.DependencyInjection
  name: Microsoft.Extensions.DependencyInjection
  href: api/Microsoft.Extensions.DependencyInjection.html
  commentId: N:Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions
  name: ServiceCollectionExtensions
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSqlServerRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  name: AddSqlServerRepositories(IServiceCollection, IConfiguration, ServiceLifetime)
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_ServiceCollectionExtensions_AddSqlServerRepositories_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_Microsoft_Extensions_DependencyInjection_ServiceLifetime_
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSqlServerRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSqlServerRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.DependencyInjection.ServiceLifetime)
  nameWithType: ServiceCollectionExtensions.AddSqlServerRepositories(IServiceCollection, IConfiguration, ServiceLifetime)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSqlServerRepositories*
  name: AddSqlServerRepositories
  href: api/Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_ServiceCollectionExtensions_AddSqlServerRepositories_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSqlServerRepositories
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddSqlServerRepositories
  nameWithType: ServiceCollectionExtensions.AddSqlServerRepositories
